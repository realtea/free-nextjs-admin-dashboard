// Generated by Xata Codegen 0.28.4. Please do not edit.
import { buildClient } from "@xata.io/client";
import type {
  BaseClientOptions,
  SchemaInference,
  XataRecord,
} from "@xata.io/client";

const tables = [
  {
    name: "study",
    columns: [
      { name: "name", type: "string" },
      { name: "passage", type: "string" },
      { name: "public", type: "bool" },
      { name: "owner", type: "string", notNull: true, defaultValue: "user1" },
      { name: "starred", type: "bool", defaultValue: "false" },
    ],
  },
  {
    name: "BHSA-with-extended-features",
    columns: [
      { name: "BHSwordSort", type: "int" },
      { name: "paragraphMarker", type: "string" },
      { name: "poetryMarker", type: "string" },
      { name: "KJVverseSortKJVbookKJVchapterKJVverse", type: "string" },
      { name: "BHSverseSortBHSbookBHSchapterBHSverse", type: "string" },
      { name: "clauseID", type: "string" },
      { name: "clauseKind", type: "string" },
      { name: "clauseType", type: "string" },
      { name: "language", type: "string" },
      { name: "BHSwordPointed", type: "string" },
      { name: "BHSwordConsonantal", type: "string" },
      { name: "SBLstyleTransliteration", type: "string" },
      { name: "poneticTranscription", type: "string" },
      { name: "HebrewLexeme", type: "string" },
      { name: "lexemeID", type: "string" },
      { name: "StrongNumber", type: "string" },
      { name: "extendedStrongNumber", type: "string" },
      { name: "morphologyCode", type: "string" },
      { name: "morphologyDetail", type: "string" },
      { name: "ETCBCgloss", type: "string" },
      { name: "extendedGloss", type: "string" },
      { name: "BSBsortBSB", type: "string" },
    ],
  },
] as const;

export type SchemaTables = typeof tables;
export type InferredTypes = SchemaInference<SchemaTables>;

export type Study = InferredTypes["study"];
export type StudyRecord = Study & XataRecord;

export type BHSAWithExtendedFeatures =
  InferredTypes["BHSA-with-extended-features"];
export type BHSAWithExtendedFeaturesRecord = BHSAWithExtendedFeatures &
  XataRecord;

export type DatabaseSchema = {
  study: StudyRecord;
  "BHSA-with-extended-features": BHSAWithExtendedFeaturesRecord;
};

const DatabaseClient = buildClient();

const defaultOptions = {
  databaseURL: "https://RealT-2894a9.us-east-1.xata.sh/db/test-db",
};

export class XataClient extends DatabaseClient<DatabaseSchema> {
  constructor(options?: BaseClientOptions) {
    super({ ...defaultOptions, ...options }, tables);
  }
}

let instance: XataClient | undefined = undefined;

export const getXataClient = () => {
  if (instance) return instance;

  instance = new XataClient();
  return instance;
};
